{"version":3,"sources":["WordForm.js","AddWord.js","WordSection.js","Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","WordForm","form","wordData","relateData","actionType","useState","relate","setRelate","openNotification","description","notification","open","message","onClick","console","log","useEffect","setFieldsValue","username","word","mean","type","pronounce","pronunce","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","axios","post","index","then","res","resetFields","Item","label","rules","required","map","mapData","value","onChange","e","temp","target","handleChangeRelateWord","danger","splice","handleDeleteClick","AddWord","icon","modalVisibility","setModalVisibility","loading","setLoading","Form","useForm","handleOk","setTimeout","submit","handleCancel","shape","title","visible","onOk","onCancel","footer","key","WordSection","data","className","Array","isArray","Search","Layout","Content","Header","Dictionary","setWord","relateWord","setRelateWord","timestamp","setWordData","setStamp","get","wordDa","pronunciation","stamp","catch","err","href","onSearch","placeholder","Object","entries","toUpperCase","App","width","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.f42cbd2a.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Input, Button, notification, Row, Col } from 'antd'\nimport axios from 'axios';\n\nconst { TextArea } = Input\n\nfunction WordForm({ form, wordData, relateData, actionType }) {\n    const [relate, setRelate] = useState([''])\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n\n    const onFinish = values => {\n        //console.log('Success:', values);\n        axios.post(`/dictionary/${actionType}`, { ...{ index: wordData.index }, ...values, ...{ relate: relate } })\n            .then(res => {\n                console.log(res)\n                form.resetFields()\n                openNotification(\"Success!\")\n            })\n    };\n\n    const openNotification = (description) => {\n        notification.open({\n            message: 'Form submit',\n            description: description,\n            onClick: () => {\n                console.log('Notification Clicked!');\n            },\n        });\n    };\n\n    const handleChangeRelateWord = (index, e) => {\n        //console.log(e.target.value + index)\n        let temp = [...relate]\n        temp[index] = e.target.value\n        setRelate(temp)\n    }\n\n    const handleDeleteClick = (index) => {\n        let temp = [...relate]\n        temp.splice(index, 1)\n        setRelate(temp)\n    }\n\n    useEffect(() => {\n        if (wordData != undefined) { }\n        form.setFieldsValue({\n            username: wordData.username,\n            word: wordData.word,\n            mean: wordData.mean,\n            type: wordData.type,\n            pronounce: wordData.pronunce,\n            description: wordData.description,\n        })\n        setRelate(relateData)\n    }, [wordData])\n\n    return (\n        <Form\n            {...layout}\n            form={form}\n            name=\"addWord\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n        >\n            <Form.Item\n                label=\"Username\"\n                name=\"username\"\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label=\"Word\"\n                name=\"word\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n            <Form.Item\n                label=\"Mean\"\n                name=\"mean\"\n                rules={[{ required: true, message: 'please input vaild mean!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Type\"\n                name=\"type\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n\n            <Form.Item\n                label=\"Word pronounce\"\n                name=\"pronounce\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Word description\"\n                name=\"description\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <TextArea></TextArea>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Relate word\"\n                name=\"relate2\"\n                rules={[{ required: false, message: '' }]}\n            >\n                {relate.map((mapData, index) => (\n                    <Row>\n                        <Col span={21}>\n                            <Input value={mapData} onChange={(e) => handleChangeRelateWord(index, e)} />\n                        </Col>\n                        <Col span={3}>\n                            <Button danger onClick={() => handleDeleteClick(index)}>X</Button>\n                        </Col>\n                    </Row>\n                ))\n                }\n                <Button onClick={() => setRelate([...relate, ''])}>Add more relate</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default WordForm;","import React, {useState} from 'react'\nimport { Button, Modal, Form } from 'antd'\nimport WordForm from './WordForm';\n\nfunction AddWord({ icon, wordData, relateData, type }) {\n    const [modalVisibility, setModalVisibility] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const [form] = Form.useForm();\n\n    function showModal() {\n        setModalVisibility(true)\n    }\n\n    function handleOk(e) {\n        setLoading(true)\n        setTimeout(() => {\n            form.submit()\n            setModalVisibility(false)\n            setLoading(false)\n        }, 1000)\n    }\n\n    function handleCancel(e) {\n        console.log(e);\n        setModalVisibility(false)\n    };\n\n    return (\n        <div>\n            <Button type=\"primary\" icon={icon} shape=\"circle\" onClick={() => showModal()}>\n            </Button>\n            <Modal\n                title={`${type} new word to dictionary`}\n                actionType={type}\n                visible={modalVisibility}\n                onOk={() => handleOk()}\n                onCancel={() => handleCancel()}\n                footer={[\n                    <Button key=\"back\" onClick={() => handleCancel() }>\n                      Return\n                    </Button>,\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => handleOk() }>\n                      Submit\n                    </Button>,\n                ]}\n            >\n                <WordForm form={form} wordData={wordData} relateData={relateData} actionType={type}/>\n            </Modal>\n        </div>\n    )\n}\n\nexport default AddWord","import React from 'react'\nimport { Row, Col } from 'antd'\n\nfunction WordSection({ title, data }) {\n    return(\n        <div>\n            <Row>\n              <Col span={24} className=\"dictionary-content-header\">\n                {title}\n              </Col>\n              {Array.isArray(data) ? \n                <Col span={24}>\n                  {data.map(mapData => `${mapData}, `)}\n                </Col>\n              :\n                <Col span={24}>\n                  {data}\n                </Col>\n            }\n            </Row>\n        </div>\n    )\n}\n\nexport default WordSection","import React, { useState, useEffect } from 'react';\nimport { Input, Row, Col, Layout, Button } from 'antd';\nimport { formOutline } from '@ant-design/icons';\nimport AddWord from './AddWord';\nimport axios from 'axios'\nimport WordSection from './WordSection';\n\nconst { Search } = Input;\nconst { Content, Header } = Layout\n\nfunction Dictionary() {\n  const [word, setWord] = useState(\"\")\n  const [relateWord, setRelateWord] = useState([])\n  const [wordData, setWordData] = useState({\n    index: 0,\n    mean: '',\n    type: '',\n    pronunce: '',\n    description: '',\n    timestamp: '',\n    username: ''\n  })\n  const [stamp, setStamp] = useState({\n    username: '',\n    timestamp: ''\n  })\n\n  useEffect(() => {\n    axios.get(`/search/dictionary/${word}`)\n    .then( res => {\n      const wordDa = {\n        index: res.data.index,\n        word: res.data.word,\n        mean: res.data.mean,\n        type: res.data.type,\n        pronunce: res.data.pronunciation,\n        description: res.data.description,\n      }\n      const relate = res.data.relate\n\n      const stamp = {\n        timestamp: res.data.timestamp,\n        username: res.data.username\n      }\n\n      console.log(res.data)\n      setWordData(wordDa)\n      setRelateWord(relate)\n      setStamp(stamp)\n    })\n    .catch( err => {\n      console.log(err)\n    })\n  }, [word])\n\n  return (\n    <div className=\"dictionary-container\">\n      <a href='/dictionary/login'><Button>Login</Button></a>\n          <Row className=\"dictionary-container-tab-menu\">\n            <Col span={6}/>\n            <Col className=\"dictionary-search-bar\" span={12}>\n              <Search onSearch={value => setWord(value)} placeholder=\"Search word\"></Search>\n            </Col>\n\n            <Col span={4}/>\n\n            <Col span={1} >\n              <AddWord className=\"dictionary-container-tab-menu-button\" wordData={wordData} relateData={relateWord}\n              icon=\"🖉\" type=\"edit\"/>\n            </Col>\n            <Col span={1}>\n              <AddWord className=\"dictionary-container-tab-menu-button\" wordData={wordData} relateData={relateWord} icon=\"+\" type=\"add\"/>\n            </Col>\n          </Row>\n\n          <div className=\"dictionary-content\">\n            {Object.entries(wordData).map(([key, value]) => {\n              return (\n                <div className=\"dictionary-content-section\">\n                  <WordSection className=\"dictionary-content-section\" title={key.toUpperCase()} data={value}/>\n                </div>\n              )\n            })}\n            <div className=\"dictionary-content-section\">\n              <WordSection className=\"dictionary-content-section\" title='RELATE WORD' data={relateWord}/>\n            </div>\n          </div>\n    </div>\n  );\n}\n\nexport default Dictionary;\n","import React from 'react';\nimport Dictionary from './Dictionary'\nimport { Layout, Image } from 'antd'\nimport './App.css';\n\nconst { Content, Header } = Layout\n\nfunction App() {\n  return(\n    <div>\n      <Layout>\n        <Header className=\"header-container\">\n          <Image className=\"app-logo\" width={140} src={process.env.PUBLIC_URL + '/vete_husbandry.png'} />\n        </Header>\n        <Content className=\"content-container\">\n          {<Dictionary/>}\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}