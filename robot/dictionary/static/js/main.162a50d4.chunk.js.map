{"version":3,"sources":["WordForm.js","AddWord.js","WordSection.js","Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","WordForm","form","wordData","actionType","openNotification","description","notification","open","message","onClick","console","log","useEffect","undefined","setFieldsValue","username","word","mean","type","pronounce","pronunce","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","axios","post","index","then","res","resetFields","Item","label","rules","required","AddWord","icon","useState","modalVisibility","setModalVisibility","loading","setLoading","Form","useForm","handleOk","e","setTimeout","submit","handleCancel","shape","title","visible","onOk","onCancel","footer","key","WordSection","data","className","Array","isArray","map","mapData","Search","Layout","Content","Header","Dictionary","setWord","relateWord","setRelateWord","timestamp","setWordData","setStamp","get","wordDa","pronunciation","relate","stamp","catch","err","href","onSearch","value","placeholder","Object","entries","toUpperCase","App","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.162a50d4.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\nimport { Form, Input, notification  } from 'antd'\nimport axios from 'axios';\n\nconst { TextArea } = Input\n\nfunction WordForm({ form, wordData, actionType }) {\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n\n    const onFinish = values => {\n        //console.log('Success:', values);\n        axios.post(`/dictionary/${actionType}`, {...{index: wordData.index}, ...values})\n        .then(res => {\n            console.log(res)\n            form.resetFields()\n            openNotification(\"Success!\")\n        })\n    };\n\n    const openNotification = (description) => {\n        notification.open({\n          message: 'Form submit',\n          description: description,\n          onClick: () => {\n            console.log('Notification Clicked!');\n          },\n        });\n    };\n\n    useEffect(() => {\n        if(wordData != undefined)\n            form.setFieldsValue({\n                username: wordData.username,\n                word: wordData.word,\n                mean: wordData.mean,\n                type: wordData.type,\n                pronounce: wordData.pronunce,\n                description: wordData.description\n            })\n    }, [wordData])\n\n    return (\n        <Form\n            {...layout}\n            form={form}\n            name=\"addWord\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n        >\n            <Form.Item\n                label=\"Username\"\n                name=\"username\"\n            >\n                <Input/>\n            </Form.Item>\n            <Form.Item\n                label=\"Word\"\n                name=\"word\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n            <Form.Item\n                label=\"Mean\"\n                name=\"mean\"\n                rules={[{ required: true, message: 'please input vaild mean!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Type\"\n                name=\"type\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n\n            <Form.Item\n                label=\"Word pronounce\"\n                name=\"pronounce\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Word description\"\n                name=\"description\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <TextArea></TextArea>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default WordForm;","import React, {useState} from 'react'\nimport { Button, Modal, Form } from 'antd'\nimport WordForm from './WordForm';\n\nfunction AddWord({ icon, wordData, type }) {\n    const [modalVisibility, setModalVisibility] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const [form] = Form.useForm();\n\n    function showModal() {\n        setModalVisibility(true)\n    }\n\n    function handleOk(e) {\n        setLoading(true)\n        setTimeout(() => {\n            form.submit()\n            setModalVisibility(false)\n            setLoading(false)\n        }, 1000)\n    }\n\n    function handleCancel(e) {\n        console.log(e);\n        setModalVisibility(false)\n    };\n\n    return (\n        <div>\n            <Button type=\"primary\" icon={icon} shape=\"circle\" onClick={() => showModal()}>\n            </Button>\n            <Modal\n                title={`${type} new word to dictionary`}\n                actionType={type}\n                visible={modalVisibility}\n                onOk={() => handleOk()}\n                onCancel={() => handleCancel()}\n                footer={[\n                    <Button key=\"back\" onClick={() => handleCancel() }>\n                      Return\n                    </Button>,\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => handleOk() }>\n                      Submit\n                    </Button>,\n                ]}\n            >\n                <WordForm form={form} wordData={wordData} actionType={type}/>\n            </Modal>\n        </div>\n    )\n}\n\nexport default AddWord","import React from 'react'\nimport { Row, Col } from 'antd'\n\nfunction WordSection({ title, data }) {\n    return(\n        <div>\n            <Row>\n              <Col span={24} className=\"dictionary-content-header\">\n                {title}\n              </Col>\n              {Array.isArray(data) ? \n                <Col span={24}>\n                  {data.map(mapData => `${mapData}, `)}\n                </Col>\n              :\n                <Col span={24}>\n                  {data}\n                </Col>\n            }\n            </Row>\n        </div>\n    )\n}\n\nexport default WordSection","import React, { useState, useEffect } from 'react';\nimport { Input, Row, Col, Layout, Button } from 'antd';\nimport { formOutline } from '@ant-design/icons';\nimport AddWord from './AddWord';\nimport axios from 'axios'\nimport WordSection from './WordSection';\n\nconst { Search } = Input;\nconst { Content, Header } = Layout\n\nfunction Dictionary() {\n  const [word, setWord] = useState(\"\")\n  const [relateWord, setRelateWord] = useState([])\n  const [wordData, setWordData] = useState({\n    index: 0,\n    mean: '',\n    type: '',\n    pronunce: '',\n    description: '',\n    timestamp: '',\n    username: ''\n  })\n  const [stamp, setStamp] = useState({\n    username: '',\n    timestamp: ''\n  })\n\n  useEffect(() => {\n    axios.get(`/search/dictionary/${word}`)\n    .then( res => {\n      const wordDa = {\n        index: res.data.index,\n        word: res.data.word,\n        mean: res.data.mean,\n        type: res.data.type,\n        pronunce: res.data.pronunciation,\n        description: res.data.description,\n      }\n      const relate = res.data.relate\n\n      const stamp = {\n        timestamp: res.data.timestamp,\n        username: res.data.username\n      }\n\n      console.log(res.data)\n      setWordData(wordDa)\n      setRelateWord(relate)\n      setStamp(stamp)\n    })\n    .catch( err => {\n      console.log(err)\n    })\n  }, [word])\n\n  return (\n    <div className=\"dictionary-container\">\n      <a href='/dictionary/login'><Button>Login</Button></a>\n          <Row className=\"dictionary-container-tab-menu\">\n            <Col span={6}/>\n            <Col className=\"dictionary-search-bar\" span={12}>\n              <Search onSearch={value => setWord(value)} placeholder=\"Search word\"></Search>\n            </Col>\n\n            <Col span={4}/>\n\n            <Col span={1} >\n              <AddWord className=\"dictionary-container-tab-menu-button\" wordData={wordData}\n              icon=\"🖉\" type=\"edit\"/>\n            </Col>\n            <Col span={1}>\n              <AddWord className=\"dictionary-container-tab-menu-button\" wordData={wordData} icon=\"+\" type=\"add\"/>\n            </Col>\n          </Row>\n\n          <div className=\"dictionary-content\">\n            {Object.entries(wordData).map(([key, value]) => {\n              return (\n                <div className=\"dictionary-content-section\">\n                  <WordSection className=\"dictionary-content-section\" title={key.toUpperCase()} data={value}/>\n                </div>\n              )\n            })}\n            <div className=\"dictionary-content-section\">\n              <WordSection className=\"dictionary-content-section\" title='RELATE WORD' data={relateWord}/>\n            </div>\n          </div>\n    </div>\n  );\n}\n\nexport default Dictionary;\n","import React from 'react';\nimport Dictionary from './Dictionary'\nimport { Layout } from 'antd'\nimport './App.css';\n\nconst { Content, Header } = Layout\n\nfunction App() {\n  return(\n    <div>\n      <Layout>\n        <Header style={{color: 'white'}}>\n          Vetter Dictionary\n        </Header>\n        <Content className=\"content-container\">\n          {<Dictionary/>}\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}