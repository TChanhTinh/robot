{"version":3,"sources":["WordForm.js","AddWord.js","WordSection.js","Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","WordForm","form","wordData","relateData","actionType","useState","relate","setRelate","openNotification","description","notification","open","message","onClick","console","log","useEffect","setFieldsValue","username","word","mean","type","pronounce","pronunce","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","axios","post","index","then","res","resetFields","window","location","reload","Item","label","rules","required","map","mapData","value","onChange","e","temp","target","handleChangeRelateWord","danger","splice","handleDeleteClick","AddWord","icon","color","modalVisibility","setModalVisibility","loading","setLoading","Form","useForm","handleOk","setTimeout","submit","handleCancel","style","backgroundColor","borderColor","shape","title","visible","onOk","onCancel","footer","key","WordSection","data","className","Array","isArray","Search","wordStruct","Layout","Content","Header","timestamp","Dictionary","setWord","relateWord","setRelateWord","setWordData","setStamp","get","wordDa","pronunciation","stamp","catch","err","onSearch","placeholder","Object","entries","toUpperCase","length","App","display","width","src","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.af822a93.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Form, Input, Button, notification, Row, Col } from 'antd'\nimport axios from 'axios';\n\nconst { TextArea } = Input\n\nfunction WordForm({ form, wordData, relateData, actionType }) {\n    const [relate, setRelate] = useState([''])\n\n    const layout = {\n        labelCol: { span: 8 },\n        wrapperCol: { span: 16 },\n    };\n\n    const onFinish = values => {\n        axios.post(`/dictionary/${actionType}`, { ...{ index: wordData.index }, ...values, ...{ relate: relate } })\n            .then(res => {\n                form.resetFields()\n                openNotification(\"Success!\")\n                window.location.reload()\n            })\n    };\n\n    const openNotification = (description) => {\n        notification.open({\n            message: 'Form submit',\n            description: description,\n            onClick: () => {\n                console.log('Notification Clicked!');\n            },\n        });\n    };\n\n    const handleChangeRelateWord = (index, e) => {\n        //console.log(e.target.value + index)\n        let temp = [...relate]\n        temp[index] = e.target.value\n        setRelate(temp)\n    }\n\n    const handleDeleteClick = (index) => {\n        let temp = [...relate]\n        temp.splice(index, 1)\n        setRelate(temp)\n    }\n\n    useEffect(() => {\n        if (wordData != undefined) { }\n        form.setFieldsValue({\n            username: wordData.username,\n            word: wordData.word,\n            mean: wordData.mean,\n            type: wordData.type,\n            pronounce: wordData.pronunce,\n            description: wordData.description,\n        })\n        setRelate(relateData)\n    }, [wordData])\n\n    return (\n        <Form\n            {...layout}\n            form={form}\n            name=\"addWord\"\n            initialValues={{ remember: true }}\n            onFinish={onFinish}\n        >\n            <Form.Item\n                label=\"Username\"\n                name=\"username\"\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                label=\"Word\"\n                name=\"word\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n            <Form.Item\n                label=\"Mean\"\n                name=\"mean\"\n                rules={[{ required: true, message: 'please input vaild mean!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Type\"\n                name=\"type\"\n                rules={[{ required: true, message: 'please input vaild word!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n\n            <Form.Item\n                label=\"Word pronounce\"\n                name=\"pronounce\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <Input></Input>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Word description\"\n                name=\"description\"\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\n            >\n                <TextArea></TextArea>\n            </Form.Item>\n\n            <Form.Item\n                label=\"Relate word\"\n                name=\"relate2\"\n                rules={[{ required: false, message: '' }]}\n            >\n                {relate.map((mapData, index) => (\n                    <Row>\n                        <Col span={21}>\n                            <Input value={mapData} onChange={(e) => handleChangeRelateWord(index, e)} />\n                        </Col>\n                        <Col span={3}>\n                            <Button danger onClick={() => handleDeleteClick(index)}>X</Button>\n                        </Col>\n                    </Row>\n                ))\n                }\n                <Button onClick={() => setRelate([...relate, ''])}>Add more relate</Button>\n            </Form.Item>\n        </Form>\n    )\n}\n\nexport default WordForm;","import React, {useState} from 'react'\nimport { Button, Modal, Form } from 'antd'\nimport WordForm from './WordForm';\n\nfunction AddWord({ icon, wordData, relateData, type, color }) {\n    const [modalVisibility, setModalVisibility] = useState(false)\n    const [loading, setLoading] = useState(false)\n\n    const [form] = Form.useForm();\n\n    function showModal() {\n        setModalVisibility(true)\n    }\n\n    function handleOk(e) {\n        setLoading(true)\n        setTimeout(() => {\n            form.submit()\n            setModalVisibility(false)\n            setLoading(false)\n        }, 1000)\n    }\n\n    function handleCancel(e) {\n        console.log(e);\n        setModalVisibility(false)\n    };\n\n    return (\n        <div>\n            <Button style={{ backgroundColor: color, borderColor: color, color: \"white\"}} icon={icon} shape=\"circle\" onClick={() => showModal()}>\n            </Button>\n            <Modal\n                title={`${type} new word to dictionary`}\n                actionType={type}\n                visible={modalVisibility}\n                onOk={() => handleOk()}\n                onCancel={() => handleCancel()}\n                footer={[\n                    <Button key=\"back\" onClick={() => handleCancel() }>\n                      Return\n                    </Button>,\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => handleOk() }>\n                      Submit\n                    </Button>,\n                ]}\n            >\n                <WordForm form={form} wordData={wordData} relateData={relateData} actionType={type}/>\n            </Modal>\n        </div>\n    )\n}\n\nexport default AddWord","import React from 'react'\nimport { Row, Col } from 'antd'\n\nfunction WordSection({ title, data }) {\n    return(\n        <div>\n            <Row>\n              <Col span={24} className=\"dictionary-content-header\">\n                {title}\n              </Col>\n              {Array.isArray(data) ?\n                data.map(mapData =>\n                <Col span={24}>\n                  {mapData}\n                </Col>\n                ) \n              :\n                <Col span={24}>\n                  {data}\n                </Col>\n            }\n            </Row>\n        </div>\n    )\n}\n\nexport default WordSection","import React, { useState, useEffect } from 'react';\nimport { Input, Row, Col, Layout, notification } from 'antd';\nimport { formOutline } from '@ant-design/icons';\nimport AddWord from './AddWord';\nimport axios from 'axios'\nimport WordSection from './WordSection';\n\nconst { Search } = Input;\nconst { Content, Header } = Layout\n\nconst wordStruct = {\n  index: 0,\n  mean: '',\n  type: '',\n  pronunce: '',\n  description: '',\n  timestamp: '',\n  username: ''\n}\n\nfunction Dictionary() {\n  const [word, setWord] = useState(\"Abattoi\")\n  const [relateWord, setRelateWord] = useState([])\n  const [wordData, setWordData] = useState(wordStruct)\n  const [stamp, setStamp] = useState({\n    username: '',\n    timestamp: ''\n  })\n\n  const openNotification = (message, description) => {\n    notification.open({\n      message: message,\n      description: description,\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  };\n\n  useEffect(() => {\n    axios.get(`/search/dictionary/${word}`)\n    .then( res => {\n      const wordDa = {\n        index: res.data.index,\n        word: res.data.word,\n        mean: res.data.mean,\n        type: res.data.type,\n        pronunce: res.data.pronunciation,\n        description: res.data.description,\n      }\n      const relate = res.data.relate\n\n      const stamp = {\n        timestamp: res.data.timestamp,\n        username: res.data.username\n      }\n      res.data.word != null ? setWordData(wordDa) : openNotification(\"Tu khong ton tai\", \"Tu khong ton tai vui long thu lai!!\") \n      setRelateWord(relate)\n      setStamp(stamp)\n    })\n    .catch( err => {\n      console.log(err)\n    })\n  }, [word])\n\n  return (\n    <div className=\"dictionary-container\">\n          <Row className=\"dictionary-container-tab-menu\">\n            <Col span={6}/>\n            <Col className=\"dictionary-search-bar\" span={12}>\n              <Search onSearch={value => setWord(value)} placeholder=\"Search word\"></Search>\n            </Col>\n            <Col span={2}/>\n            <Col span={1} className=\"dictionary-container-tab-menu-button\">\n              <AddWord wordData={wordStruct} relateData={[]} icon=\"+\" color=\"green\" type=\"add\"/>\n            </Col>\n            <Col span={1} className=\"dictionary-container-tab-menu-button\" >\n              <AddWord wordData={wordData} color=\"blue\" relateData={relateWord}\n              icon=\"🖉\" type=\"edit\"/>\n            </Col>\n            <Col span={1} className=\"dictionary-container-tab-menu-button\">\n              <AddWord wordData={wordData} relateData={relateWord} color=\"red\" icon=\"🗑\" type=\"delete\"/>\n            </Col>\n          </Row>\n\n          <div className=\"dictionary-content\">\n            {Object.entries(wordData).map(([key, value]) => {\n              return (\n                <div className=\"dictionary-content-section\">\n                  <WordSection className=\"dictionary-content-section\" title={key.toUpperCase()} data={value}/>\n                </div>\n              )\n            })}\n            {relateWord.length != 0 ? <div className=\"dictionary-content-section\">\n              <WordSection className=\"dictionary-content-section\" title='RELATE WORD' data={relateWord}/>\n            </div> : <div/>}\n            \n          </div>\n    </div>\n  );\n}\n\nexport default Dictionary;\n","import React from 'react';\nimport Dictionary from './Dictionary'\nimport { Layout, Image, Row, Col } from 'antd'\nimport './App.css';\n\nconst { Content, Header } = Layout\n\nfunction App() {\n  return (\n    <div>\n      <Layout>\n        <Header className=\"header-container\">\n          <div style={{ display: \"inline\" }}>\n            <Image className=\"app-logo\" width={140} src={process.env.PUBLIC_URL + '/vete_husbandry.png'} />\n          </div>\n          {/*<div className=\"header-container-title\">\n            <h1 style={{ color: \"white\", textAlign: \"center\" }}>DICTIONARY</h1>\n  </div>*/}\n        </Header>\n        <Content className=\"content-container\">\n          {<Dictionary />}\n        </Content>\n      </Layout>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}