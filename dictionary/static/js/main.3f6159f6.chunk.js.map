{"version":3,"sources":["WordForm.js","AddWord.js","WordSection.js","Dictionary.js","App.js","serviceWorker.js","index.js"],"names":["TextArea","Input","WordForm","form","wordData","openNotification","description","notification","open","message","onClick","console","log","useEffect","undefined","setFieldsValue","username","word","mean","type","pronounce","pronunce","labelCol","span","wrapperCol","name","initialValues","remember","onFinish","values","axios","post","then","res","resetFields","Item","label","rules","required","AddWord","icon","useState","modalVisibility","setModalVisibility","loading","setLoading","Form","useForm","handleOk","e","setTimeout","submit","handleCancel","shape","title","visible","onOk","onCancel","footer","key","WordSection","data","className","Search","Layout","Content","Header","Dictionary","setWord","timestamp","setWordData","stamp","setStamp","get","wordDa","pronunciation","catch","err","href","onSearch","value","placeholder","Object","entries","map","toUpperCase","App","style","color","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.3f6159f6.chunk.js","sourcesContent":["import React, { useEffect } from 'react'\r\nimport { Form, Input, notification  } from 'antd'\r\nimport axios from 'axios';\r\n\r\nconst { TextArea } = Input\r\n\r\nfunction WordForm({ form, wordData }) {\r\n    const layout = {\r\n        labelCol: { span: 8 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const onFinish = values => {\r\n        //console.log('Success:', values);\r\n        axios.post('/dictionary/add', values)\r\n        .then(res => {\r\n            console.log(res)\r\n            form.resetFields()\r\n            openNotification(\"Success!\")\r\n        })\r\n    };\r\n\r\n    const openNotification = (description) => {\r\n        notification.open({\r\n          message: 'Form submit',\r\n          description: description,\r\n          onClick: () => {\r\n            console.log('Notification Clicked!');\r\n          },\r\n        });\r\n    };\r\n\r\n    useEffect(() => {\r\n        if(wordData != undefined)\r\n            form.setFieldsValue({\r\n                username: wordData.username,\r\n                word: wordData.word,\r\n                mean: wordData.mean,\r\n                type: wordData.type,\r\n                pronounce: wordData.pronunce,\r\n                description: wordData.description\r\n            })\r\n    }, [wordData])\r\n\r\n    return (\r\n        <Form\r\n            {...layout}\r\n            form={form}\r\n            name=\"addWord\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={onFinish}\r\n        >\r\n            <Form.Item\r\n                label=\"Username\"\r\n                name=\"username\"\r\n            >\r\n                <Input/>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Word\"\r\n                name=\"word\"\r\n                rules={[{ required: true, message: 'please input vaild word!' }]}\r\n            >\r\n                <Input></Input>\r\n            </Form.Item>\r\n            <Form.Item\r\n                label=\"Mean\"\r\n                name=\"mean\"\r\n                rules={[{ required: true, message: 'please input vaild mean!' }]}\r\n            >\r\n                <Input></Input>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Type\"\r\n                name=\"type\"\r\n                rules={[{ required: true, message: 'please input vaild word!' }]}\r\n            >\r\n                <Input></Input>\r\n            </Form.Item>\r\n\r\n\r\n            <Form.Item\r\n                label=\"Word pronounce\"\r\n                name=\"pronounce\"\r\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\r\n            >\r\n                <Input></Input>\r\n            </Form.Item>\r\n\r\n            <Form.Item\r\n                label=\"Word description\"\r\n                name=\"description\"\r\n                rules={[{ required: true, message: 'please input correct pronounce!' }]}\r\n            >\r\n                <TextArea></TextArea>\r\n            </Form.Item>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default WordForm;","import React, {useState} from 'react'\r\nimport { Button, Modal, Form } from 'antd'\r\nimport WordForm from './WordForm';\r\n\r\nfunction AddWord({ icon, wordData }) {\r\n    const [modalVisibility, setModalVisibility] = useState(false)\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    function showModal() {\r\n        setModalVisibility(true)\r\n    }\r\n\r\n    function handleOk(e) {\r\n        setLoading(true)\r\n        setTimeout(() => {\r\n            form.submit()\r\n            setModalVisibility(false)\r\n            setLoading(false)\r\n        }, 1000)\r\n    }\r\n\r\n    function handleCancel(e) {\r\n        console.log(e);\r\n        setModalVisibility(false)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Button type=\"primary\" icon={icon} shape=\"circle\" onClick={() => showModal()}>\r\n            </Button>\r\n            <Modal\r\n                title=\"Add new word to dictionary\"\r\n                visible={modalVisibility}\r\n                onOk={() => handleOk()}\r\n                onCancel={() => handleCancel()}\r\n                footer={[\r\n                    <Button key=\"back\" onClick={() => handleCancel() }>\r\n                      Return\r\n                    </Button>,\r\n                    <Button key=\"submit\" type=\"primary\" loading={loading} onClick={() => handleOk() }>\r\n                      Submit\r\n                    </Button>,\r\n                ]}\r\n            >\r\n                <WordForm form={form} wordData={wordData}/>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddWord","import React from 'react'\r\nimport { Row, Col } from 'antd'\r\n\r\nfunction WordSection({ title, data }) {\r\n    return(\r\n        <div>\r\n            <Row>\r\n              <Col span={24} className=\"dictionary-content-header\">\r\n                {title}\r\n              </Col>\r\n              <Col span={24}>\r\n                {data}\r\n              </Col>\r\n            </Row>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WordSection","import React, { useState, useEffect } from 'react';\r\nimport { Input, Row, Col, Layout, Button } from 'antd';\r\nimport { formOutline } from '@ant-design/icons';\r\nimport AddWord from './AddWord';\r\nimport axios from 'axios'\r\nimport WordSection from './WordSection';\r\n\r\nconst { Search } = Input;\r\nconst { Content, Header } = Layout\r\n\r\nfunction Dictionary() {\r\n  const [word, setWord] = useState(\"\")\r\n  const [wordData, setWordData] = useState({\r\n    mean: '',\r\n    type: '',\r\n    pronunce: '',\r\n    description: '',\r\n    timestamp: '',\r\n    username: ''\r\n  })\r\n  const [stamp, setStamp] = useState({\r\n    username: '',\r\n    timestamp: ''\r\n  })\r\n\r\n  useEffect(() => {\r\n    axios.get(`/search/dictionary/${word}`)\r\n    .then( res => {\r\n      const wordDa = {\r\n        word: res.data.word,\r\n        mean: res.data.mean,\r\n        type: res.data.type,\r\n        pronunce: res.data.pronunciation,\r\n        description: res.data.description,\r\n      }\r\n\r\n      const stamp = {\r\n        timestamp: res.data.timestamp,\r\n        username: res.data.username\r\n      }\r\n\r\n      console.log(res.data)\r\n      setWordData(wordDa)\r\n      setStamp(stamp)\r\n    })\r\n    .catch( err => {\r\n      console.log(err)\r\n    })\r\n  }, [word])\r\n\r\n  return (\r\n    <div className=\"dictionary-container\">\r\n      <a href='/dictionary/login'><Button>Login</Button></a>\r\n          <Row className=\"dictionary-container-tab-menu\">\r\n            <Col span={6}/>\r\n            <Col className=\"dictionary-search-bar\" span={12}>\r\n              <Search onSearch={value => setWord(value)} placeholder=\"Search word\"></Search>\r\n            </Col>\r\n\r\n            <Col span={4}/>\r\n\r\n            <Col span={1} >\r\n              <AddWord className=\"dictionary-container-tab-menu-button\" wordData={wordData}\r\n              icon=\"🖉\"/>\r\n            </Col>\r\n            <Col span={1}>\r\n              <AddWord className=\"dictionary-container-tab-menu-button\" icon=\"+\"/>\r\n            </Col>\r\n          </Row>\r\n\r\n          <div className=\"dictionary-content\">\r\n            {Object.entries(wordData).map(([key, value]) => {\r\n              return (\r\n                <div className=\"dictionary-content-section\">\r\n                  <WordSection className=\"dictionary-content-section\" title={key.toUpperCase()} data={value}/>\r\n                </div>\r\n              )\r\n            })}\r\n\r\n            <Row className=\"dictionary-stamp\">\r\n              <Col span={12}>\r\n                {stamp.username}\r\n              </Col>\r\n              <Col span={12}>\r\n                {stamp.timestamp}\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dictionary;\r\n","import React from 'react';\r\nimport Dictionary from './Dictionary'\r\nimport { Layout } from 'antd'\r\nimport './App.css';\r\n\r\nconst { Content, Header } = Layout\r\n\r\nfunction App() {\r\n  return(\r\n    <div>\r\n      <Layout>\r\n        <Header style={{color: 'white'}}>\r\n          Vetter Dictionary\r\n        </Header>\r\n        <Content className=\"content-container\">\r\n          {<Dictionary/>}\r\n        </Content>\r\n      </Layout>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'antd/dist/antd.css';\r\n\r\nReactDOM.render(\r\n  <div>\r\n    <App />\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}